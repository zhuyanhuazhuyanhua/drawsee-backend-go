# 背景
我们正在为学习大学数学/物理的初学者制作可视化的数学/物理动画，以帮助他们更好地理解数学/物理概念和知识。
我们现在已经收集了大量的数学/物理动画镜头（包含镜头描述和镜头脚本），这些脚本已经被我们的老师和学生审核过，并且已经通过了我们的测试。
现在需要制作其中一个镜头的动画。
我们需要使用manim来制作动画，manim是一个基于python的动画制作工具，它可以将我们的镜头脚本转换为manim动画。

# 任务
你的任务是根据给定的镜头描述和镜头脚本生成相应的manim动画python代码。
请仔细阅读以下信息，并按照指示生成代码。
<镜头描述>
{{shotDescription}}
</镜头描述>
<镜头脚本>
{{shotScript}}
</镜头脚本>
在生成代码时，请遵循以下指南:

## 动画要求
- 代码要能准确实现镜头描述和脚本中所要求的动画效果。
- 代码尽量多地使用几何化与数形结合的演示方法
- 代码不再需要任何人为修改（如添加图片等）
- 说明文字使用中文
- 较长的文字（超过20字）需要分行显示
- 文字和数学组件出现后，在不用之后需要记得让其消失
- 几何化的演示部分，需要符合逻辑，动画的变换需要丝滑流畅
- 特别重要的是：你一定要规划好整个画面的空间，不要让文字和数学内容挤在一起，让文字和数学内容之间有一定距离，并且保证不让文字和文字重叠！如果一个画面文字比较多，宁愿让前面的文字先消失，再显示后面的文字。

## 语法要求
- 确保代码符合manim的语法规则和编程规范。
- 代码需要严格符合manimCE v0.19.0的语法，不能调用对象没有的方法
- 生成的代码需要构成完整的python代码，包含所需库的导入和场景类的构建
- 视频全程需要保证计算正确，不能出现计算错误（比如错误地计算和向量、差向量）
- 对代码进行检查以保证没有语法错误，并且能够直接运行。

## 格式要求
- 文本和数学内容需要使用Tex组件，markdown格式，注意Tex组件中，数学公式部分需要用$包裹
- 特别注意！！！数学公式必须包裹在$或$$符号中，例如：$x^2 + y^2 = z^2$，否则会出现渲染错误!
- 所有文本只能使用Tex()组件，不能使用Text()组件，也不能使用MathTex()组件，并且Tex()组件中所有的公式都必须用$或$$包裹。
- 文本的写入和淡出需要是同一个Tex对象！不允许写入的时候创建一个Tex对象，然后淡出的时候又创建一个相同的新的Tex对象。也就是说Write/FadeIn和FadeOut的对象必须是同一个Tex对象。
- 文字中不能包含希腊字母等特殊字符，如果需要使用，请使用Tex()组件+latex格式
- latex中的换行符需要使用\\\\（四个反斜杠）
- 对TracedPath组件，不要使用FadeOut()方法，而是使用dissipating_time参数
- 如果需要用到Line对象，不能使用Line对象的get_critical_point方法，因为manim并没有这个功能
- 如果需要用到ParametricSurface对象，请使用Surface对象，不要使用ParametricSurface对象
- 如果需要使用3D对象或使用move_camera方法移动相机视角，请继承ThreeDScene类，不要继承Scene类
- 如果3D对象需要淡出，请使用Uncreate()方法，不要使用FadeOut()方法
- 不可以将Surface对象转换成2D的文本对象
- TexFontTemplates并不包含ctex这个属性，不要使用
- VGroup对象没有'columns'属性，也没有 get_columns() 方法，不要使用。如果要获取矩阵中的元素，可以直接通过 Matrix 对象的 get_entries() 方法。
- 确保传递给 Matrix 的元素是字符串或数字，而不是 Tex 对象

全面检查代码，以保证没有语法错误！保证能够直接运行！

# 输出要求
请直接输出python代码，不需要任何解释。代码使用```python...```代码块包裹，不需要任何前置解释，也不需要任何后置解释。
我将在Java中把你的输出去掉前9个字符(```python)且去掉后三个字符(```)，提取出中间的代码文本，将其直接写入到一个python文件中，要保证它能够直接在命令行使用manim命令运行并渲染、不报错，所以你只需要以```python...```的格式输出即可。

# 输出样例
<镜头描述>
镜头从黑屏渐亮，展示一个简单的二维坐标系，x轴和y轴清晰标注。
</镜头描述>
<镜头脚本>
大家好，今天我们来探讨矩阵乘法。首先，让我们从一个简单的二维坐标系开始，这是理解矩阵乘法的基础。
</镜头脚本>
<输出>
```python
from manim import *

class MatrixMultiplicationIntro(Scene):
    def construct(self):
        # 镜头渐亮
        self.play(FadeIn(Text("大家好，今天我们来探讨矩阵乘法。\\\\首先，让我们从一个简单的二维坐标系开始，\\\\这是理解矩阵乘法的基础。").scale(0.8)))
        self.wait(2)
        self.play(FadeOut(Text("大家好，今天我们来探讨矩阵乘法。\\\\首先，让我们从一个简单的二维坐标系开始，\\\\这是理解矩阵乘法的基础。").scale(0.8))))

        # 创建坐标系
        axes = Axes(
            x_range=[-5, 5, 1],
            y_range=[-5, 5, 1],
            axis_config={"color": BLUE},
        )
        axes_labels = axes.get_axis_labels(x_label="x", y_label="y")

        # 展示坐标系
        self.play(Create(axes), Write(axes_labels))
        self.wait(2)

        # 镜头结束
        self.play(FadeOut(axes), FadeOut(axes_labels))
        self.wait(1)
```
</输出>
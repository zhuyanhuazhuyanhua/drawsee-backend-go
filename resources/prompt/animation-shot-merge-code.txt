# 背景
我们正在为学习大学数学/物理的初学者制作可视化的数学/物理动画，以帮助他们更好地理解数学/物理概念和知识。
我们需要使用manim来制作动画，manim是一个基于python的动画制作工具，它可以将我们的镜头脚本转换为manim动画。
我们正在制作一个动画，这个动画将包含多个镜头，每个镜头都有自己的描述和脚本，并且我们为每个镜头写好了manim代码。
现在需要合并所有这些镜头的代码为一个整体的完整的manim代码，让它渲染完整的动画。

# 任务
你的任务是根据给定的整个动画每一个镜头的镜头描述、镜头脚本以及对应的manim代码，
按顺序合并所有这些manim代码为一个整体的完整的manim代码，渲染完整的动画，
同时，需要注意场景之间的衔接，以及文字的显示和消失。
在合并代码时要先分析代码，分析各个变量，整合时不同镜头间变量名重复了，需要修改变量名。

请仔细阅读以下信息，并按照指示生成代码。
<动画中所有镜头的信息>
{{shotInfoListString}}
</动画中所有镜头的信息>
在生成代码时，请遵循以下指南:

## 动画要求
- 代码要按照顺序完整地实现整个动画
- 注意各个动画场景之间的衔接，不能生硬地拼合，前面场景用完的元素需要消失，且可以加一些文字说明来转场
- 动画的过程需要尽量符合人类观看习惯
- 由于视频没有配音，每一个场景都需要有文字讲解，场景之间的变换、概念的引入、公式的推导也都需要有文字说明作衔接
- 视频不限长度，但也不可以过长
- 对于同一个位置的文字，前一个文字需要先消失，后一个文字再出现
- 文字和数学组件出现后，在不用之后需要记得让其消失
- 默认使用中文描述
- 特别重要的是：你一定要规划好整个画面的空间，不要让文字和数学内容挤在一起，让文字和数学内容之间有一定距离，并且保证不让文字和文字重叠！如果一个画面文字比较多，宁愿让前面的文字先消失，再显示后面的文字。

## 语法要求
- 确保代码符合manim的语法规则和编程规范
- 对代码进行检查以保证没有语法错误，并且能够直接运行。
- 代码需要构成完整的python文件，包含所需库的导入和场景类的构建
- 特别注意！！！数学公式必须包裹在$或$$符号中，例如：$x^2 + y^2 = z^2$，否则会出现渲染错误!你必须检查所有镜头中的代码，保证数学公式都用$或$$包裹！

## 格式要求
- 你的场景类名需要命名为"ManimScene"
- 文字说明和数学内容需要使用Tex组件，不要使用Text组件，markdown格式，注意Tex组件中，数学公式部分需要用$包裹
- 所有文本只能使用Tex()组件，不能使用Text()组件，也不能使用MathTex()组件，并且Tex()组件中所有的公式都必须用$或$$包裹。
- 文本的写入和淡出需要是同一个Tex对象！不允许写入的时候创建一个Tex对象，然后淡出的时候又创建一个相同的新的Tex对象。也就是说Write/FadeIn和FadeOut的对象必须是同一个Tex对象。
- 代码使用ManimCE最新版本，引入的是manim库，代码需要完全符合manim的语法，以免出现渲染错误
- 如果需要用到Line对象，不能使用Line对象的get_critical_point方法，因为manim并没有这个功能
- 如果需要用到ParametricSurface对象，请使用Surface对象，不要使用ParametricSurface对象
- 如果需要使用3D对象或使用move_camera方法移动相机视角，请继承ThreeDScene类，不要继承Scene类
- 如果3D对象需要淡出，请使用Uncreate()方法，不要使用FadeOut()方法
- 不可以将Surface对象转换成2D的文本对象
- VGroup对象没有'columns'属性，也没有 get_columns() 方法，不要使用。如果要获取矩阵中的元素，可以直接通过 Matrix 对象的 get_entries() 方法。
- 确保传递给 Matrix 的元素是字符串或数字，而不是 Tex 对象

全面检查代码，以保证没有语法错误！保证能够直接运行！

# 输出要求
请直接输出python代码，不需要任何解释。代码使用```python...```代码块包裹，不需要任何前置解释，也不需要任何后置解释。
我将在Java中把你的输出去掉前9个字符(```python)且去掉后三个字符(```)，提取出中间的代码文本，将其直接写入到一个python文件中，要保证它能够直接在命令行使用manim命令运行并渲染、不报错，所以你只需要以```python...```的格式输出即可。
